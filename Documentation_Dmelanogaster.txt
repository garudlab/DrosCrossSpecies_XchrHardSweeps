#-------------------------------------------------------------------------------------------------------------------------
# Mariana Harris
# mharris94@g.ucla.edu
# Spring 2023
# Documentation for data cleaning and analysis of D. melanogaster data
# Datasets DGRP (RAL) and DPGP3 (ZI) are downloaded from http://www.johnpool.net/genomes.html and processed as in Harris & Garud 2023, MBE
#-------------------------------------------------------------------------------------------------------------------------

# D. melanogaster reference genome annotations (v5.57; Flybase) (Lack et al. 2015; Mackay et  al. 2012)

#------------------------------------------------------------------------------------------------------------------------------------
#                                       HIGH REPEAT DENSITY
#------------------------------------------------------------------------------------------------------------------------------------
module load anaconda3
##repeat masker get gVcfFileName from RepeatMasker https://www.repeatmasker.org/RepeatMasker/
export BLASTDB_LMDB_MAP_SIZE=100000000 #do this only once

$SCRATCH/RepeatMasker/RepeatMasker -e rmblast -gff --species "Drosophila melanogaster" -dir RepeatMasker/ dmel-all-chromosome-r5.57.fasta

#get corresponding bed file of repeats 

awk 'NR<=3 || /2L/ || /2R/|| /3L/|| /3R/|| /X/'  dmel-all-chromosome-r5.57.fasta.out | awk 'NR>3' | awk ' BEGIN { OFS = "\t" } ;  {print  $5, $6, $7}'  > D.mel_rm.out.bed 


## code in R jupyter notebook ~/MiscCode/RepeatDensity.ipynb

## Computed the proportion of bp marked as repeats in 100kb windows (per chromosome per species)
## Obtained bed file with coordinates of windows with 20% or more marked as repeats by repeat masker

grep "^[^#]" Dmel0.1_50000_highRepDensity.bed | awk ' BEGIN { OFS = "\t" } ;  {print  $1, $2}' > Dmel_HighRep_sites_0.1_50kb.txt
grep "^[^#]" Dmel0.2_100000_highRepDensity.bed | awk ' BEGIN { OFS = "\t" } ;  {print  $1, $2}' > Dmel_HighRep_sites_0.2_100kb.txt
grep "^[^#]" Dmel0.2_50000_highRepDensity.bed | awk ' BEGIN { OFS = "\t" } ;  {print  $1, $2}' > Dmel_HighRep_sites_0.2_50kb.txt


#------------------------------------------------------------------------------------------------------------------------------------
#             Functional categories Flybase v5.57 
#------------------------------------------------------------------------------------------------------------------------------------

# Dowload D. mel exon intron and intergenic files from flybase

###convert fasta to bed file

for type in exon intron intergenic gene; do
  grep '^>' dmel-all-${type}-r5.57.fasta > dmel_${type}FastaHeaders.txt #make file with only the headers
  grep -o '\bloc.*' dmel_${type}FastaHeaders.txt | grep -o '^\S*' > dmel-all-${type}-r5.57.bed.1
  grep -o '^>.*' dmel_${type}FastaHeaders.txt | grep -o '^\S*' | sed 's/>/''/g' > ${type}_names_bed.txt #names for bed file

  #print everything after loc=
  sed -n -e 's/^.*=//p' dmel-all-${type}-r5.57.bed.1 >  dmel-all-${type}-r5.57.bed.2
  sed -i 's/:/\t/g' dmel-all-${type}-r5.57.bed.2 #remove :
  sed -i  's/;/''/g' dmel-all-${type}-r5.57.bed.2 #remove ; 
  sed -i 's/\.\./\t/g' dmel-all-${type}-r5.57.bed.2  #remove ..

  paste dmel-all-${type}-r5.57.bed.2  ${type}_names_bed.txt > dmel-all-${type}-r5.57.bed.3 #add name column to bed file
  sed -i 's/$/\t0/' dmel-all-${type}-r5.57.bed.3 #add score column
  awk '$2~/complement/?$0=$0FS "\t-" :$0=$0FS "\t+"' dmel-all-${type}-r5.57.bed.3 >  dmel-all-${type}-r5.57.bed #add strand + is forward (-) is reverse
  sed -i 's/complement/''/g' dmel-all-${type}-r5.57.bed
  sed -i 's/(/''/g' dmel-all-${type}-r5.57.bed
  sed -i 's/)/''/g' dmel-all-${type}-r5.57.bed

done


# Get long and short introns bed files,  long intron >120, short intron <120

awk -F"\t" '$3 -$2 < 120' dmel-all-intron-r5.57.bed > dmel-all-shortintron-r5.57.bed
awk -F"\t" '$3 -$2 > 120' dmel-all-intron-r5.57.bed > dmel-all-longintron-r5.57.bed

# rename chromosomes 

for type in exon intron intergenic gene shortintron longintron; do
  sed -i 's/2L/chr2L/g' dmel-all-${type}-r5.57.bed
  sed -i 's/2R/chr2R/g' dmel-all-${type}-r5.57.bed
  sed -i 's/3L/chr3L/g' dmel-all-${type}-r5.57.bed
  sed -i 's/3R/chr3R/g' dmel-all-${type}-r5.57.bed
  sed -i 's/X/chrX/g' dmel-all-${type}-r5.57.bed
done

# remove low recomb regions

module load bedtools

for type in exons introns intergenic; do
  bedtools subtract  -a dmel-all-${type}-r5.57.bed -b  LowRecIntervals_All.bed > mel-all-${type}-r5.57_LowRecFiltered.bed
done

#####
Nam et al. If any position can be included as multiple functional cate- gories, we annotated the position with the following priority: exons, introns, and intergenic sequences
####
/u/project/ngarud/Garud_lab/dgn/Drosophila_resources/ReferenceGenomes_DMel/FunctionalCategories

bedtools subtract -a dmel-all-intron-r5.57.bed -b dmel-all-exon-r5.57.bed -A > D.mel_UNIQUE_introns.bed

bedtools subtract -a dmel-all-intergenic-r5.57.bed -b dmel-all-exon-r5.57.bed  -A > D.mel_UNIQUE_intergenic_1.bed

bedtools subtract -a  D.mel_UNIQUE_intergenic_1.bed -b D.mel_UNIQUE_introns.bed -A > D.mel_UNIQUE_intergenic.bed

bedtools subtract -a dmel-all-shortintronsNeutral-r5.57.bed -b Rdmel-all-exon-r5.57.bed -A > D.mel_UNIQUE_putativelyNeutral.bed


cat D.mel_UNIQUE_intergenic.bed | awk '{ $6 = $3 - $2 } 1' | awk '$'6' >= 10000 ' | awk   ' BEGIN { OFS = "\t" } ; {print $1,$2=$2+5000,$3=$3-5000, $4, $5}' > D.mel_UNIQUE_subintergenic.bed



rm D.mel_UNIQUE_intergenic_1.bed 
cp dmel-all-intron-r5.57.bed D.mel_UNIQUE_exons.bed


# Now get corresponding exon intron intergenic regions from RA and ZI populations

##### DGN data processing for functional categories

Download the consensus sequence data files for the Raleigh (RAL) and Zambia (ZI) D. melanogaster populations from the Drosophila Genome Nexus (DGN) at www.johnpool.net [Lack et al. 2015].

  tar xvf dpgp3_sequences.tar.bz2

  #ZI data
  tar -xf dpgp3_Chr2L.tar
  tar -xf dpgp3_Chr2R.tar
  tar -xf dpgp3_Chr3L.tar
  tar -xf dpgp3_Chr3R.tar
  tar -xf dpgp3_ChrX.tar

#remove strains with high IBD

rm ZI397N_* ZI530_* ZI269_* ZI240_* ZI218_* ZI207_* ZI523_* ZI86_*

# obtain the number of N’s per sample per chromosome
for x in X 2R 2L 3R 3L; do
  # go over every seq file and cound number of N's
  for file in *Chr${x}.seq; do
      N=$(grep -o 'N' $file |wc -l)
      echo $file | cut -d "/" -f2 | sed '1s/$/\t'$N'/' >>   Ncount_Chr${x}.txt #file with number of N's per strain
  done
done

#then order the files with the missing data counts and select the 100 strains with least number of N’s.
for x in X 2R 2L 3R 3L; do
  sort -n -k 2 Ncount_Chr${x}.txt | head -100 | awk '{print $1}' > Lowest_MissingData.txt
  for file in *Chr${x}.seq; do
      comm -2 -3 <(ls *Chr${x}.seq ) <(sort Lowest_MissingData.txt) | xargs rm
  done
done


#make each line of the FASTA file have at most 60 nucleotides for easy viewing.
for file in *.seq; do
    fold -w 60 ${file} > ${file}_fold 
    mv ${file}_fold ${file}
done


#convert *.seq files to FASTA format 
for x in X 2R 2L 3R 3L; do
  # go over every seq file 
  for file in *Chr${x}.seq; do
      sed -i  '1i\>chr'${x} $file
  done
done

# go over every seq file and add sample identifier to fasta header
for file in *.seq; do
    sed -i '1{s/$/'${file}'/}' $file 
done

#add new line at end of file
for file in *.seq; do
    sed -i -e '$a\' $file 
done

# merge all fasta files to multisample file per chromosome
for x in X 2R 2L 3R 3L; do
  cat *_Chr${x}.seq > dpgp3_chr${x}.fasta
done

############## get regions  #########


#### separate into one fasta file per sample per chr

for chr in chr2L chr2R chr3L chr3R chrX; do
  sed 's/RAL-[0-9].*//g' *_${chr}.fasta > ${chr}_noIDheader.fasta
  mkdir $chr
  cd $chr
  csplit -k --prefix=${chr}_sample_  ../${chr}_noIDheader.fasta "/>/" "{*}"
  cd ../
done


### get fasta files for each category per sample

#remove chr from chr name
for chr in chrX chr2R chr2L chr3R chr3L; do
cd ${chr}
    for file in ${chr}_sample*; do
      sed -i 's/chr//g' ${file}
    done
cd ../
done

qsub qsub_getRegions_fasta


#make file with exon introns intergenic  positions

for chr in chrX chr2R chr2L chr3R chr3L; do
  cd $chr
  for type in exons introns intergenic subintergenic; do
    grep "^>" ${type}_UNIQUE_${chr}_sample_25.fa > ${chr}-${type}-UNIQUE.pos
  done
  cd ..
done

for chr in chrX chr2R chr2L chr3R chr3L; do
  cd $chr
  for type in exons introns intergenic subintergenic; do
    sed -i 's/>'${chr}':/''/g' ${chr}-${type}-UNIQUE.pos
    sed -i 's/-/\t/g' ${chr}-${type}-UNIQUE.pos

    for file in ${type}_UNIQUE_${chr}_sample_*.fa; do
      sed -i '/^>/d' ${file}  # remove lines that start with >, each lien in file corresponds to one exon and each column to one sample
    done

    paste ${type}_UNIQUE_${chr}_sample_*.fa > ${type}_${chr}_tmp # merge exons from all samples

    paste ${chr}-${type}-UNIQUE.pos ${type}_${chr}_tmp > ${type}_${chr}_UNIQUE
  done
  rm *_tmp
  cd ..
done


qsub qsub_calcPi

