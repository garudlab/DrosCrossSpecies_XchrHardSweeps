initialize() {
	if (exists("slimgui")) {
		defineConstant("R", 5e-9); //1e-7
		defineConstant("MU", 1e-9); //1e-7
		defineConstant("N", 1e6); //5e-4
		defineConstant("Q", 100); //rescaling constant
		defineConstant("sd", 0);
		defineConstant("sb", 0.03);
		defineConstant("run", 1);
		defineConstant("ChrType",'X');
		defineConstant("THETA_A", 1);
		defineConstant("PF", 1.0);
		defineConstant("AgeSweep", 0.0);
		defineConstant("burn_in", 0.5);
		defineConstant("sexRatio", 0.5);
		defineConstant("H", 0.5);
		defineConstant("file_path","tmp/out_X.txt");
	
	
	}
	defineConstant("simID", getSeed());
	defineConstant("Mu_a", THETA_A/(4*(N)));
	defineConstant("chromosome_length", 1e5);
	defineConstant("k",1);
	
	initializeMutationType("m1", 0.5, "f", 0);
	initializeMutationType("m2", H, "f", sb);
	m1.mutationStackPolicy = "f";// ??
	initializeSex(ChrType);
	
	
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElementType("g2", m2,1);
	initializeGenomicElement(g1, 0, asInteger(chromosome_length/2)-1);
	initializeGenomicElement(g2, asInteger(chromosome_length/2), asInteger(chromosome_length/2)+1);
	initializeGenomicElement(g1, asInteger(chromosome_length/2)+2, chromosome_length-1);
	initializeMutationRate(c(MU*Q,Mu_a*Q,MU*Q), c(asInteger(chromosome_length/	2)-1,asInteger(chromosome_length/2), asInteger(chromosome_length)-1));
	
	//initializeRecombinationRate(0,sex="M");
	//initializeRecombinationRate(R*Q,sex="F");
	initializeRecombinationRate(R*Q);

}
function (void)selecOn(void){
	print("selection on");
	// save the state of the simulation
	sim.outputFull("/tmp/slim_" + simID + ".txt");
	sim.tag=1;
}
function (void)checkSweep(void) {
	counts = p1.genomes.individual.countOfMutationsOfType(m2);
	freq = mean(counts > 0);
	if (freq >=PF)
	{
		//output tree file
		catn("reached PF");
		sim.tag=sim.generation;
		print(sim.tag);
		sim.deregisterScriptBlock(s1);
	}
}

function (void)addRecurrentMut(void) {
	num_muts=rpois(1,THETA_A/2);
	//sim.tag = sim.tag+num_muts;
	if(num_muts>0){
		for(i in 1:num_muts){
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m2, asInteger(chromosome_length/2)-1);
		}
	}
}

function (void)checkSweep2(void) {
	counts = p1.genomes.individual.countOfMutationsOfType(m2);
	freq = mean(counts > 0);
	if (freq >= PF)
	{
		p_sample=p1.sampleIndividuals(100);
		if (ChrType=="X"){
			muts = p_sample.genome1.mutationsOfType(m2);
			females= p_sample[which(p_sample.sex=="F")];
			muts = c(muts,females.genome2.mutationsOfType(m2));
		}
		else{
			muts=p_sample.genomes.mutationsOfType(m2);
		}
		muts = unique(muts).size();
		line = asString(muts) +  "\t" + asString(sim.generation)+"\t" + "\t"+asString(freq)
			+"\t" +asString(ChrType)+ "\t" +asString(H)+ "\t" +asString(THETA_A);
		
		catn(line);
		if (muts >1){
			
			p1.outputMSSample(100,filePath=file_path);
			sim.simulationFinished();
		}
		else{
			//restart
			print("HARD SWEEP - RESTARTING");
			sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt");
			
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			sim.tag=1;
		}
	
	}

}


function (void)AgeOfSweep(void) {
	if (sim.tag>0 & sim.generation==sim.tag+AgeSweep)
	{
		//output tree file
		catn("End simulation");
		print(sim.generation);
		sim.treeSeqOutput(file_path);
		sim.simulationFinished();
	}
}

mutation(m2) {
	return ifelse(sim.tag==1,  T, F);}

//sexual antagonism: mutation is benefical in males with selection coeff s and deleterious on females with selection coeff -s
//fitness(m1){ return ifelse(individual.sex == "M" & sim.tag==1, (1+k)-k*relFitness,  relFitness);}

1 {
	
	sim.addSubpop("p1", asInteger(N/Q),sexRatio);
	
	sim.tag=0;
	
	catn("mutation rate= "+asString(Mu_a));
	catn("s= "+asString(sb));
	
	defineConstant("G_start", sim.generation + asInteger(burn_in*(N/Q)));
	print(G_start);
	
	G_end = G_start+asInteger(N/Q)*100;
	print(G_end);
	
	sim.registerLateEvent(NULL, "{selecOn();}", G_start, G_start);
	sim.registerLateEvent(NULL, "{checkSweep2();}", G_start+2, G_end);
	sim.registerLateEvent(NULL, "{EndSimulation();}", G_end, G_end);



}

